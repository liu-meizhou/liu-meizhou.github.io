import{_ as e,c as r,e as i,a1 as t}from"./chunks/framework.C-01xEl2.js";const l="/assets/async_defer.CrtUUkcw.svg",m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"menus/document/brower/原理/优化资源加载.md","filePath":"menus/document/brower/原理/优化资源加载.md","lastUpdated":1707281529000}'),s={name:"menus/document/brower/原理/优化资源加载.md"};function o(c,a,d,n,h,p){return i(),r("div",null,a[0]||(a[0]=[t('<h2 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-label="Permalink to &quot;CSS&quot;">​</a></h2><p>CSS会阻塞渲染树的构建，进而阻塞整个页面的加载时间</p><h3 id="缩减大小" tabindex="-1">缩减大小 <a class="header-anchor" href="#缩减大小" aria-label="Permalink to &quot;缩减大小&quot;">​</a></h3><p>缩减CSS大小可以让CSS资源文件大小减少，从而缩短下载速度</p><ul><li>压缩：去除注释、空格、换行等【打包工具提供的插件】</li><li>移除未使用的CSS【Chrome的<a href="https://developer.chrome.com/docs/devtools/css/reference/?hl=zh-cn#coverage" target="_blank" rel="noreferrer">覆盖率工具</a>】</li></ul><h3 id="避免使用css的-import声明" tabindex="-1">避免使用CSS的@import声明 <a class="header-anchor" href="#避免使用css的-import声明" aria-label="Permalink to &quot;避免使用CSS的@import声明&quot;">​</a></h3><p><code>@import</code>和<code>&lt;link&gt;</code>标签的工作方式类似，都可以加载外部CSS资源，只是@import无法被预加载扫描器发现，他会在第二波请求才获取</p><ul><li>改成<code>&lt;link&gt;</code>的请求方式</li><li>使用<code>preload</code>进行预加载</li></ul><h3 id="关键css" tabindex="-1">关键CSS <a class="header-anchor" href="#关键css" aria-label="Permalink to &quot;关键CSS&quot;">​</a></h3><p>只阻塞关键的CSS，其余CSS可以使用异步加载或者放到<code>&lt;body&gt;</code>元素末尾。</p><ul><li>如关键CSS较少，也可以内嵌到HTML中</li></ul><h2 id="javascript" tabindex="-1">JavaScript <a class="header-anchor" href="#javascript" aria-label="Permalink to &quot;JavaScript&quot;">​</a></h2><p>js会阻塞html解析器和渲染树的构建</p><h3 id="异步js" tabindex="-1">异步js <a class="header-anchor" href="#异步js" aria-label="Permalink to &quot;异步js&quot;">​</a></h3><p>加载不带<code>defer</code>或<code>async</code>属性的<code>&lt;script&gt;</code>元素时，浏览器会阻止解析和呈现，直到脚本下载、解析并执行完毕。同样，内联脚本也会阻止解析器，直到解析和执行脚本。</p><ul><li>加上<code>defer</code>或<code>async</code>属性 <img src="'+l+'" alt="async_defer" loading="lazy"></li></ul><h3 id="服务端渲染" tabindex="-1">服务端渲染 <a class="header-anchor" href="#服务端渲染" aria-label="Permalink to &quot;服务端渲染&quot;">​</a></h3><p>在单页应用(SPA)中，通常都是加载一个啥也没有的HTML文件，再通过js去渲染元素(客户端渲染)，如果有图片等资源，这些资源请求会在第二波请求发出，而且预加载扫描器发现不了这些资源。我们应该避免这样使用：</p><ul><li>使用服务端预渲染(SSR)</li></ul><h3 id="压缩js" tabindex="-1">压缩js <a class="header-anchor" href="#压缩js" aria-label="Permalink to &quot;压缩js&quot;">​</a></h3><p>压缩js可以让js资源文件大小减少，从而缩短下载速度</p><ul><li>压缩：去除注释、空格、换行等【打包工具提供的插件】</li><li>代码混淆、伪造：源 JavaScript 中的符号也会被缩短</li></ul><h3 id="代码拆分-动态加载" tabindex="-1">代码拆分-动态加载 <a class="header-anchor" href="#代码拆分-动态加载" aria-label="Permalink to &quot;代码拆分-动态加载&quot;">​</a></h3><p>代码拆分：可以减少页面初始 JavaScript 的实用技术</p><ul><li>动态import语法进行拆分<div class="tip custom-block"><p class="custom-block-title">动态import</p><p>动态 import() 是一种类似于函数的表达式，可让您动态加载 JavaScript 模块。 它是一种异步操作，可用于导入模块以响应互动或需要加载其他模块的其他任何条件。动态 import() 与静态 import 语句不同，后者会立即导入模块，并且要求父模块及其所有依赖项都得到解析和执行，然后才能运行。</p></div></li></ul><h2 id="图片" tabindex="-1">图片 <a class="header-anchor" href="#图片" aria-label="Permalink to &quot;图片&quot;">​</a></h2><h3 id="懒加载" tabindex="-1">懒加载 <a class="header-anchor" href="#懒加载" aria-label="Permalink to &quot;懒加载&quot;">​</a></h3><p>图片在与可见视口的内时才加载</p><ul><li>设置<code>loading=lazy</code><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> loading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lazy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div></li><li>使用<a href="/menus/document/performance/优化实现/资源文件优化.html#图片懒加载">js进行图片懒加载</a></li></ul><h2 id="service-worker预缓存" tabindex="-1">Service Worker预缓存 <a class="header-anchor" href="#service-worker预缓存" aria-label="Permalink to &quot;Service Worker预缓存&quot;">​</a></h2><p>Web Work(浏览器多线程概念)的一种应用：ServiceWork</p><p>ServiceWork的一种实现：<a href="https://developer.chrome.com/docs/workbox/?hl=zh-cn" target="_blank" rel="noreferrer">Workbox</a></p>',32)]))}const k=e(s,[["render",o]]);export{m as __pageData,k as default};
