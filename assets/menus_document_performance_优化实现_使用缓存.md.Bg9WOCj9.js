import{_ as i,c as a,e,a1 as t}from"./chunks/framework.C-01xEl2.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"menus/document/performance/优化实现/使用缓存.md","filePath":"menus/document/performance/优化实现/使用缓存.md","lastUpdated":1707281529000}'),r={name:"menus/document/performance/优化实现/使用缓存.md"};function h(l,s,n,p,k,o){return e(),a("div",null,s[0]||(s[0]=[t(`<h2 id="有什么缓存" tabindex="-1">有什么缓存 <a class="header-anchor" href="#有什么缓存" aria-label="Permalink to &quot;有什么缓存&quot;">​</a></h2><ol><li>内存缓存 <ol><li>用<code>preload</code>和<code>prefetch</code>的请求会被缓存到内存</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;preload&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://xxx/sdk.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">link</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> rel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prefetch&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;https://xxx/sdk.js&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li>磁盘缓存: http缓存</li><li>代理缓存: service worker</li></ol><h2 id="preload-和-prefetch-的区别" tabindex="-1">preload 和 prefetch 的区别 <a class="header-anchor" href="#preload-和-prefetch-的区别" aria-label="Permalink to &quot;preload 和 prefetch 的区别&quot;">​</a></h2><ul><li>preload会将资源的优先级设置为highest, 而prefetch的资源优先级为lowest。prefetch的资源会在网络空闲的时候才加载</li></ul><p>现在有文件a.js，首页会加载a.js, a.js中会加载b.js，这时候可以配置b。js预加载</p><p>就比如<a href="/menus/document/project/深信服/sase平台的首页性能优化.html">性能优化</a>这个直接把权限相关api写上预加载就可以了</p><h2 id="http缓存" tabindex="-1">http缓存 <a class="header-anchor" href="#http缓存" aria-label="Permalink to &quot;http缓存&quot;">​</a></h2><p><a href="/menus/document/brower/面试题汇总/浏览器缓存.html">强缓存和协商缓存</a></p><h2 id="service-worker" tabindex="-1">service worker <a class="header-anchor" href="#service-worker" aria-label="Permalink to &quot;service worker&quot;">​</a></h2><p>Service Worker脚本缓存规则与一般脚本不同。如果设置了强缓存，并且max-age设置小于24小时，那么与普通http缓存无异，但是如果max-age大于24小时，那么service worker文件会在24小时之后强制更新</p>`,10)]))}const E=i(r,[["render",h]]);export{c as __pageData,E as default};
