import{_ as e,c as a,e as o,a1 as p}from"./chunks/framework.C-01xEl2.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"menus/document/js/面试题汇总/原型链.md","filePath":"menus/document/js/面试题汇总/原型链.md","lastUpdated":1707281529000}'),r={name:"menus/document/js/面试题汇总/原型链.md"};function c(n,t,i,s,d,l){return o(),a("div",null,t[0]||(t[0]=[p('<h2 id="说说原型链" tabindex="-1">说说原型链 <a class="header-anchor" href="#说说原型链" aria-label="Permalink to &quot;说说原型链&quot;">​</a></h2><p>在 JavaScript 中，每个对象都有一个原型对象（prototype），原型对象又可以有自己的原型对象，这样就形成了一个原型链（prototype chain）。原型链是 JavaScript 中实现继承的一种机制，它允许对象通过继承属性和方法来扩展自身的功能。</p><p><strong>当访问一个对象的属性或方法时，如果该对象本身没有该属性或方法，JavaScript 引擎会沿着原型链向上查找，直到找到该属性或方法为止。如果最终仍然没有找到该属性或方法，JavaScript 引擎会返回 undefined。</strong></p><blockquote><p>例如，假设有一个对象 a，它的原型对象是 b，b 的原型对象是 c，c 的原型对象是 null。当访问 a 的一个属性时，JavaScript 引擎会先查找 a 自身是否有该属性，如果没有，就会沿着原型链向上查找，依次查找 b、c，直到找到该属性或到达原型链的末尾为止。</p></blockquote><p>原型链的实现方式是通过 JavaScript 中的 proto 属性来实现的。每个对象都有一个 proto 属性，它指向该对象的原型对象。通过修改 proto 属性，可以改变对象的原型对象，从而改变对象的属性和方法。</p><p>需要注意的是，原型链的过程是在运行时动态生成的，因此可以在运行时修改原型链，从而实现动态继承和多态等功能。同时，原型链也是 JavaScript 中的一个重要概念，理解原型链对于深入理解 JavaScript 的面向对象编程非常重要。</p><h2 id="object的原型是啥-这个的原型对象又是什么" tabindex="-1">Object的原型是啥，这个的原型对象又是什么 <a class="header-anchor" href="#object的原型是啥-这个的原型对象又是什么" aria-label="Permalink to &quot;Object的原型是啥，这个的原型对象又是什么&quot;">​</a></h2><p>在 JavaScript 中，所有对象都有一个原型对象（prototype），包括 Object 对象。Object 对象的原型对象是一个空对象（Object.prototype），它是所有对象原型链的顶端。</p><p>Object.prototype 对象是 JavaScript 中的一个内置对象，它包含了一些通用的属性和方法，例如 toString()、valueOf() 等。这些属性和方法可以被所有对象继承和使用。</p><p>当创建一个新的对象时，该对象会自动继承 Object.prototype 对象的属性和方法。</p><p>需要注意的是，Object.prototype 对象是所有对象原型链的顶端，它本身没有原型对象。这意味着在查找属性或方法时，如果在 Object.prototype 中没有找到，就会到达原型链的末尾，返回 undefined。</p>',11)]))}const m=e(r,[["render",c]]);export{b as __pageData,m as default};
