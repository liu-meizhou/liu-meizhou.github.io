import{_ as o,c as a,e as i,a1 as l}from"./chunks/framework.C-01xEl2.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"menus/document/brower/面试题汇总/Cookie.md","filePath":"menus/document/brower/面试题汇总/Cookie.md","lastUpdated":1707281529000}'),t={name:"menus/document/brower/面试题汇总/Cookie.md"};function r(n,e,c,d,s,h){return i(),a("div",null,e[0]||(e[0]=[l('<h2 id="什么是cookie" tabindex="-1">什么是Cookie <a class="header-anchor" href="#什么是cookie" aria-label="Permalink to &quot;什么是Cookie&quot;">​</a></h2><h3 id="由来" tabindex="-1">由来 <a class="header-anchor" href="#由来" aria-label="Permalink to &quot;由来&quot;">​</a></h3><p>由于HTTP无状态：服务器无法知道两个请求是否来自同一个浏览器，即服务器不知道用户上一次做了什么，每次请求都是完全相互独立。</p><p>cookie一开始设计是为了<strong>维持状态</strong></p><h3 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h3><ol><li>浏览器发送请求到服务器(无状态请求)</li><li>服务器会返回一个Cookie到浏览器</li><li>浏览器之后每个请求都会带上Cookie，服务器也就知道当前请求的浏览器是哪个了，从而保持状态</li></ol><h3 id="生成机制" tabindex="-1">生成机制 <a class="header-anchor" href="#生成机制" aria-label="Permalink to &quot;生成机制&quot;">​</a></h3><ul><li>在服务器中生成Cookie，在请求的Response Header带上Set-Cookie字段来设置cookie</li><li>在浏览器中生成Cookie，通过浏览器document.cookie=xxx设置</li></ul><h3 id="属性" tabindex="-1">属性 <a class="header-anchor" href="#属性" aria-label="Permalink to &quot;属性&quot;">​</a></h3><ul><li>name: cookie的key值</li><li>value: cookie的值</li><li>httpOnly<code>boolean</code>：js是否有权限对这个cookie进行读写</li><li>expires/max-age: cookie的有效期</li><li>domain: cookie在哪个域名下会生效</li><li>path: cookie在哪个路径下会生效</li></ul><h3 id="缺陷" tabindex="-1">缺陷 <a class="header-anchor" href="#缺陷" aria-label="Permalink to &quot;缺陷&quot;">​</a></h3><ul><li>不用于存储，一个cookie大概存4kb，而且cookie在发送请求时都会带上，会导致http数据包过大，会造成性能浪费，</li></ul>',12)]))}const m=o(t,[["render",r]]);export{u as __pageData,m as default};
