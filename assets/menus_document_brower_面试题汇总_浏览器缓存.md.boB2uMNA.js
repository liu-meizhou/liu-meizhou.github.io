import{_ as a,c as t,e as i,a1 as o}from"./chunks/framework.C-01xEl2.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"menus/document/brower/面试题汇总/浏览器缓存.md","filePath":"menus/document/brower/面试题汇总/浏览器缓存.md","lastUpdated":1707281529000}'),r={name:"menus/document/brower/面试题汇总/浏览器缓存.md"};function l(n,e,d,s,c,p){return i(),t("div",null,e[0]||(e[0]=[o('<h2 id="浏览器缓存" tabindex="-1">浏览器缓存 <a class="header-anchor" href="#浏览器缓存" aria-label="Permalink to &quot;浏览器缓存&quot;">​</a></h2><p>浏览器缓存是指浏览器在访问网页时将一些资源（如HTML、CSS、JavaScript、图片等）保存在本地的临时存储中，以便在后续的访问中能够更快地加载和显示页面内容。浏览器缓存可以提高页面的加载速度和用户体验，减少对服务器的请求和数据传输。</p><p>浏览器缓存可以分为两种类型：</p><ol><li>强缓存（HTTP缓存）：通过设置响应头中的缓存控制字段（如Cache-Control和Expires）来控制缓存的行为。如果资源的缓存控制字段指定了缓存时间或过期时间，并且未过期，浏览器会直接从缓存中加载资源。</li><li>协商缓存（HTTP缓存）：通过设置响应头中的验证字段（如ETag和Last-Modified）来进行缓存验证。如果资源的验证字段与服务器上的资源匹配，服务器会返回304 Not Modified状态码，告诉浏览器可以使用缓存的资源。缓存未命中返回200 OK状态码，告诉浏览器需要更新缓存资源</li></ol><h2 id="缓存具体字段" tabindex="-1">缓存具体字段 <a class="header-anchor" href="#缓存具体字段" aria-label="Permalink to &quot;缓存具体字段&quot;">​</a></h2><ul><li>Cache-Control: max-age</li><li>Expires</li><li>ETag / If-None-Match</li><li>Last-Modified / If-Modified-Since</li></ul>',6)]))}const f=a(r,[["render",l]]);export{u as __pageData,f as default};
