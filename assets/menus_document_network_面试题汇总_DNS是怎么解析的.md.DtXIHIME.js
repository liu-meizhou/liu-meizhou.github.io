import{_ as t,c as a,e as l,a1 as o}from"./chunks/framework.C-01xEl2.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"menus/document/network/面试题汇总/DNS是怎么解析的.md","filePath":"menus/document/network/面试题汇总/DNS是怎么解析的.md","lastUpdated":1707281529000}'),n={name:"menus/document/network/面试题汇总/DNS是怎么解析的.md"};function i(r,e,s,d,c,S){return l(),a("div",null,e[0]||(e[0]=[o('<h2 id="dns是怎么解析的" tabindex="-1">DNS是怎么解析的 <a class="header-anchor" href="#dns是怎么解析的" aria-label="Permalink to &quot;DNS是怎么解析的&quot;">​</a></h2><p><strong>先查缓存，再递归解析</strong></p><ol><li>本地DNS缓存：首先，计算机会检查本地DNS缓存，其中保存了最近访问的域名和其对应的IP地址。如果在缓存中找到了匹配的记录，解析过程将在此步骤结束。</li><li>本地主机文件：计算机会检查本地主机文件（通常是hosts文件），该文件可以手动配置域名和IP地址的映射关系。如果在主机文件中找到了匹配的记录，解析过程将在此步骤结束。</li><li>DNS递归解析：计算机将向本地网络中配置的DNS服务器发送解析请求。这通常是由互联网服务提供商（ISP）提供的DNS服务器。</li></ol><h3 id="dns递归解析过程" tabindex="-1">DNS递归解析过程 <a class="header-anchor" href="#dns递归解析过程" aria-label="Permalink to &quot;DNS递归解析过程&quot;">​</a></h3><ol><li>缓存查询：本地DNS服务器接收到请求后，首先会查询是否存在缓存中。如果在缓存中找到了匹配的记录，解析过程将在此步骤结束。</li><li>迭代查询：不存在缓存则查询根域名服务器，询问它关于所请求域名的顶级域名服务器的地址。</li><li>顶级域名服务器查询：询问它关于所请求域名的权威域名服务器的地址。</li><li>权威域名服务器查询：询问它关于所请求域名的IP地址。</li><li>本地DNS服务器缓存：本地DNS服务器将收到的IP地址保存在缓存中，以备将来的解析请求使用，并将IP地址返回给计算机。</li></ol>',5)]))}const D=t(n,[["render",i]]);export{m as __pageData,D as default};
