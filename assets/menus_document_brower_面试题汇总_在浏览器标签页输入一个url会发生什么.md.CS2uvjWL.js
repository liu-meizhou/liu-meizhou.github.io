import{_ as t,c as l,e as a,a1 as r}from"./chunks/framework.C-01xEl2.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"menus/document/brower/面试题汇总/在浏览器标签页输入一个url会发生什么.md","filePath":"menus/document/brower/面试题汇总/在浏览器标签页输入一个url会发生什么.md","lastUpdated":1707281529000}'),i={name:"menus/document/brower/面试题汇总/在浏览器标签页输入一个url会发生什么.md"};function o(n,e,m,u,s,c){return a(),l("div",null,e[0]||(e[0]=[r('<h2 id="在浏览器标签页输入一个url会发生什么" tabindex="-1">在浏览器标签页输入一个url会发生什么 <a class="header-anchor" href="#在浏览器标签页输入一个url会发生什么" aria-label="Permalink to &quot;在浏览器标签页输入一个url会发生什么&quot;">​</a></h2><p>URL（统一资源定位符）</p><ol><li>解析 URL：浏览器会解析输入的 URL，提取出协议（如 HTTP(默认80端口)、HTTPS(默认443端口)）、域名/IP地址:端口号（如 www.example.com:8080）、路径和查询参数等信息。</li><li>DNS 解析：浏览器会向 DNS（域名系统）服务器发送请求，将主机名解析为对应的 IP 地址。这是为了找到要访问的网站的服务器。</li><li>建立 TCP 连接：浏览器会与目标服务器建立 TCP 连接。这是通过使用目标服务器的 IP 地址和端口号来建立的。</li><li>发送 HTTP 请求：浏览器会向目标服务器发送一个 HTTP 请求，其中包含请求的方法（如 GET、POST）、路径、请求头和请求体等信息。</li><li>服务器处理请求：目标服务器接收到浏览器发送的请求后，会根据请求的路径和其他信息来处理请求。这可能涉及到读取数据库、执行服务器端代码等操作。</li><li>服务器响应：服务器处理完请求后，会生成一个 HTTP 响应，其中包含状态码、响应头和响应体等信息。</li><li>接收响应：浏览器接收到服务器发送的响应后，会根据响应的内容进行处理。这可能包括解析 HTML、CSS 和 JavaScript，并进行页面渲染。</li><li>渲染页面：浏览器会根据接收到的响应内容，解析并渲染页面，将页面呈现给用户。</li></ol><p>需要注意的是，上述步骤是一个简化的描述，实际过程中可能还涉及到重定向、缓存、安全验证等其他步骤。不同的浏览器和网络环境可能会有细微的差异。</p><h2 id="关联面试题" tabindex="-1">关联面试题 <a class="header-anchor" href="#关联面试题" aria-label="Permalink to &quot;关联面试题&quot;">​</a></h2><ul><li><a href="/menus/document/network/面试题汇总/DNS是怎么解析的.html">DNS是怎么解析的</a></li><li><a href="/menus/document/network/面试题汇总/建立TCP连接.html">建立TCP连接</a></li><li><a href="/menus/document/network/面试题汇总/建立http连接.html">建立http连接</a></li><li><a href="/menus/document/network/面试题汇总/建立https连接.html">建立https连接</a></li><li><a href="/menus/document/brower/面试题汇总/页面是如何解析的.html">页面是如何解析的</a></li><li><a href="/menus/document/brower/面试题汇总/页面白屏如何排查问题.html">页面白屏如何排查问题</a></li></ul>',6)]))}const _=t(i,[["render",o]]);export{h as __pageData,_ as default};
