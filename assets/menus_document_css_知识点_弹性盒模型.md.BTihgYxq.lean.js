import{_ as o,c as l,e as a,a1 as d}from"./chunks/framework.C-01xEl2.js";const c="/assets/flexModel.Dg-BSRPS.png",u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"menus/document/css/知识点/弹性盒模型.md","filePath":"menus/document/css/知识点/弹性盒模型.md","lastUpdated":1707281529000}'),t={name:"menus/document/css/知识点/弹性盒模型.md"};function r(i,e,f,x,s,n){return a(),l("div",null,e[0]||(e[0]=[d('<h2 id="什么是弹性盒模型" tabindex="-1">什么是弹性盒模型 <a class="header-anchor" href="#什么是弹性盒模型" aria-label="Permalink to &quot;什么是弹性盒模型&quot;">​</a></h2><p>设置<code>display: flex/inline-flex</code>后，元素内部表现为弹性盒模型：</p><ul><li>主轴（main axis）是沿着 flex 元素放置的方向延伸的轴（比如页面上的横向的行、纵向的列）。该轴的开始和结束被称为 main start 和 main end。</li><li>交叉轴（cross axis）是垂直于 flex 元素放置方向的轴。该轴的开始和结束被称为 cross start 和 cross end。</li></ul><p>如下图</p><p><img src="'+c+'" alt="boxModel" loading="lazy"></p><h2 id="flex主轴" tabindex="-1">flex主轴 <a class="header-anchor" href="#flex主轴" aria-label="Permalink to &quot;flex主轴&quot;">​</a></h2><p>主轴由 <code>flex-direction</code> 定义，可以取 4 个值：<code>row</code>(默认)、<code>row-reverse</code>、<code>column</code>、<code>column-reverse</code></p><h2 id="flex-wrap-实现多行flex容器" tabindex="-1">flex-wrap 实现多行flex容器 <a class="header-anchor" href="#flex-wrap-实现多行flex容器" aria-label="Permalink to &quot;flex-wrap 实现多行flex容器&quot;">​</a></h2><p>默认flex布局只能在一行展示<code>flex-wrap: nowrap</code>, 为了实现多行效果，设置属性<code>flex-wrap: wrap</code>。</p><p>当设置为nowrap，这也是初始值，flexItem将会缩小以适应容器。如果项目的子元素无法缩小或者缩小程度还不够小，使用nowrap会导致溢出。</p><h2 id="简写属性flex-flow" tabindex="-1">简写属性flex-flow <a class="header-anchor" href="#简写属性flex-flow" aria-label="Permalink to &quot;简写属性flex-flow&quot;">​</a></h2><p>你可以将两个属性 <code>flex-direction</code>和 <code>flex-wrap</code> 组合为简写属性 <code>flex-flow</code>。第一个指定的值为 <code>flex-direction</code> ，第二个指定的值为 <code>flex-wrap</code>.</p><h2 id="flexitem的简写属性flex" tabindex="-1">flexItem的简写属性flex <a class="header-anchor" href="#flexitem的简写属性flex" aria-label="Permalink to &quot;flexItem的简写属性flex&quot;">​</a></h2><p><code>flex</code>属性是由<code>flex-grow</code>、<code>flex-shrink</code>、<code>flex-basis</code>组合的简写属性</p><ul><li><code>flex-basis</code>: 定义了该元素的空间大小，可设置 <ul><li><code>auto</code>(默认): 浏览器会检测这个元素是否具有确定的尺寸，如果没有给元素设定尺寸，flex-basis 的值采用元素内容的尺寸</li><li><code>&lt;&#39;width&#39;&gt;</code>: 手动设置宽度，如 <code>flex-basis: 100px</code></li></ul></li><li><code>flex-grow</code>: <code>flexItem</code>会以<code>flex-basis</code>为基础，沿主轴方向增长尺寸。这会使该元素延展，并占据此方向轴上的可用空间(available space)。如果有其他元素也被允许延展，那么他们会各自占据可用空间的一部分。这个属性负值无效，默认为 <strong>0</strong><ul><li>如果我们给所有元素设定 <code>flex-grow</code> 值为 1，容器中的可用空间会被这些元素平分。它们会延展以填满容器主轴方向上的空间。</li><li><code>flex-grow</code> 属性可以按比例分配空间。如果总共有3个flexItem, 第一个元素 <code>flex-grow</code> 值为 2，其他元素值为 1，则第一个元素将占有 2/4, 另外两个元素各占有 1/4。</li></ul></li><li><code>flex-shrink</code>: 和<code>flex-grow</code>相反，<code>flex-shrink</code>处理flexItem的收缩的问题。给<code>flex-shrink</code>属性赋予更大的数值可以比赋予小数值的同级元素收缩程度更大。默认为 <strong>1</strong>，负值无效。在计算flexItem收缩的大小时，它的最小尺寸也会被考虑进去，当小于最小尺寸时，不再被收缩。</li></ul><h3 id="flex常见值" tabindex="-1">flex常见值 <a class="header-anchor" href="#flex常见值" aria-label="Permalink to &quot;flex常见值&quot;">​</a></h3><ul><li><code>flex: initial</code>: 是把FlexItem重置为初始值，它相当于<code>flex: 0 1 auto</code>。在这里 <code>flex-grow</code> 的值为 0，所以flexItem不会超过 <code>flex-basis</code> 的尺寸。<code>flex-shrink</code> 的值为 1, 所以可以缩小flexItem来防止它们溢出。<code>flex-basis</code> 的值为 auto. flexItem尺寸可以是在主维度上设置的，也可以是根据内容自动得到的。</li><li><code>flex: auto</code>: 等同于 <code>flex: 1 1 auto</code>；这种情况下，flexItem在需要的时候既可以拉伸也可以收缩。</li><li><code>flex: none</code>: 可以把flexItem设置为不可伸缩。它和设置为 <code>flex: 0 0 auto</code>是一样的。元素既不能拉伸或者收缩。</li><li><code>flex: 1</code>: 等同于 <code>flex: 1 1 0</code>。元素可以在 <code>flex-basis</code> 为 0 的基础上伸缩。</li></ul><h2 id="flex元素对其" tabindex="-1">flex元素对其 <a class="header-anchor" href="#flex元素对其" aria-label="Permalink to &quot;flex元素对其&quot;">​</a></h2><ul><li><code>justify-content</code>: 主轴对齐方式，值为 <code>flex-start</code>(默认)、<code>flex-end</code>、<code>center</code>、<code>space-around</code>、<code>space-between</code></li><li><code>align-items</code>: 交叉轴对齐方式，值为 <code>stretch</code>(默认，拉伸到和交叉轴一样尺寸)、<code>flex-start</code>、<code>flex-end</code>、<code>center</code></li></ul><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox" target="_blank" rel="noreferrer">mdn弹性盒模型</a></li></ul><h2 id="其他值得观看" tabindex="-1">其他值得观看 <a class="header-anchor" href="#其他值得观看" aria-label="Permalink to &quot;其他值得观看&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_flexible_box_layout/Relationship_of_flexbox_to_other_layout_methods" target="_blank" rel="noreferrer">FlexBox 如何与其他布局方法和其他 CSS 规范相关</a></li></ul>',23)]))}const p=o(t,[["render",r]]);export{u as __pageData,p as default};
