import{_ as e,c as i,e as l,a1 as t}from"./chunks/framework.C-01xEl2.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"menus/document/brower/面试题汇总/页面是如何解析的.md","filePath":"menus/document/brower/面试题汇总/页面是如何解析的.md","lastUpdated":1707281529000}'),r={name:"menus/document/brower/面试题汇总/页面是如何解析的.md"};function o(c,a,n,s,S,d){return l(),i("div",null,a[0]||(a[0]=[t('<h2 id="页面是如何解析的" tabindex="-1">页面是如何解析的 <a class="header-anchor" href="#页面是如何解析的" aria-label="Permalink to &quot;页面是如何解析的&quot;">​</a></h2><ol><li>解析HTML：浏览器首先会解析HTML文档，构建DOM树。DOM树是由HTML标签和它们的属性组成的树形结构，表示网页的结构和内容。</li><li>解析CSS：浏览器会解析CSS样式表，构建CSSOM树。CSSOM树是由CSS规则和它们的属性组成的树形结构，表示网页的样式和布局。</li><li>构建渲染树：浏览器将DOM树和CSSOM树合并，构建渲染树。渲染树是由DOM树和CSSOM树中的元素和属性组成的树形结构，表示网页的可视化内容和布局。</li><li>布局和绘制：浏览器根据渲染树进行布局和绘制，生成最终的网页。布局是指计算元素的位置和大小，绘制是指将元素绘制到屏幕上。</li><li>JavaScript解析和执行：如果网页中包含JavaScript代码，浏览器会解析和执行JavaScript代码，修改DOM树和CSSOM树，以及处理用户交互和动态效果等。</li></ol><h2 id="js阻塞" tabindex="-1">JS阻塞 <a class="header-anchor" href="#js阻塞" aria-label="Permalink to &quot;JS阻塞&quot;">​</a></h2><ol><li>脚本加载阻塞：当浏览器加载JavaScript脚本时，会阻塞页面的渲染和用户交互，直到脚本加载完毕并执行完毕。</li><li>脚本执行阻塞：当JavaScript执行耗时较长的任务时，会阻塞页面的渲染和用户交互，直到任务执行完毕。</li><li>脚本错误阻塞：当JavaScript代码存在语法错误或逻辑错误时，会阻塞页面的渲染和用户交互，直到错误被修复或代码被移除。</li></ol><p>解决：</p><ol><li>将JavaScript代码放在页面底部，以避免脚本加载阻塞页面的渲染和用户交互。</li><li>将JavaScript代码压缩和合并，以减少脚本加载时间和执行时间。</li><li>使用异步加载JavaScript脚本，以避免脚本加载阻塞页面的渲染和用户交互。</li><li>使用Web Worker等多线程技术，将耗时的任务放在后台线程中执行，以避免脚本执行阻塞页面的渲染和用户交互。</li><li>优化JavaScript代码，减少DOM操作和重绘等，以提高JavaScript执行效率和减少阻塞时间。</li></ol><h2 id="相关链接" tabindex="-1">相关链接 <a class="header-anchor" href="#相关链接" aria-label="Permalink to &quot;相关链接&quot;">​</a></h2><ul><li><a href="/menus/document/html/面试题汇总/script标签中defer和async的区别.html">script标签中defer和async的区别</a></li><li><a href="/menus/document/brower/面试题汇总/重绘和重排.html">重绘和重排</a></li></ul>',8)]))}const u=e(r,[["render",o]]);export{m as __pageData,u as default};
