import{_ as a,c as e,e as i,a1 as t}from"./chunks/framework.C-01xEl2.js";const C=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"menus/document/network/面试题汇总/建立TCP连接.md","filePath":"menus/document/network/面试题汇总/建立TCP连接.md","lastUpdated":1707281529000}'),o={name:"menus/document/network/面试题汇总/建立TCP连接.md"};function r(n,l,c,h,P,d){return i(),e("div",null,l[0]||(l[0]=[t('<h2 id="说说tcp连接" tabindex="-1">说说TCP连接 <a class="header-anchor" href="#说说tcp连接" aria-label="Permalink to &quot;说说TCP连接&quot;">​</a></h2><ol><li>TCP连接是一种面向连接的、可靠的传输协议，它在网络层次结构中处于传输层。</li><li>TCP连接的建立需要经过三次握手。</li><li>在连接建立后，数据的传输是可靠的，因为TCP协议会对数据进行分段、排序、校验和重传等操作，以保证数据的完整性和可靠性。</li><li>当数据传输完成后，连接可以通过四次挥手来关闭。</li><li>TCP连接的优点是可靠性高，缺点是建立连接的过程比较耗时，占用网络资源较多。</li></ol><h2 id="tcp的三次握手和tcp的四次挥手" tabindex="-1">TCP的三次握手和TCP的四次挥手 <a class="header-anchor" href="#tcp的三次握手和tcp的四次挥手" aria-label="Permalink to &quot;TCP的三次握手和TCP的四次挥手&quot;">​</a></h2><ol><li>三次握手：即客户端向服务器发送SYN包，服务器收到后回复一个SYN+ACK包，客户端再回复一个ACK包，这样连接就建立成功了。</li><li>四次挥手：即客户端向服务器发送FIN包，服务器回复一个ACK包，服务器再向客户端发送FIN包，客户端回复一个ACK包，这样连接就关闭了。</li></ol><h2 id="为啥是三次握手四次挥手" tabindex="-1">为啥是三次握手四次挥手 <a class="header-anchor" href="#为啥是三次握手四次挥手" aria-label="Permalink to &quot;为啥是三次握手四次挥手&quot;">​</a></h2><p>保证连接的可靠性与正确性</p><ol><li>三次握手 <ol><li>客户端第一个SYN包超时，客户端会重发一个包，第二个包正常建立连接。第一个包延迟到达，如果是两次握手，那服务器会错误的打开连接浪费资源了</li></ol></li><li>四次挥手 <ol><li>也是一样，任何一个环节出现包超时就不能正常的关闭资源</li></ol></li></ol><h2 id="tcp怎么保证可靠性的" tabindex="-1">TCP怎么保证可靠性的 <a class="header-anchor" href="#tcp怎么保证可靠性的" aria-label="Permalink to &quot;TCP怎么保证可靠性的&quot;">​</a></h2><ol><li>三次握手：确保客户端和服务端都可以正常收发数据</li><li>滑动窗口：TCP协议使用滑动窗口机制来控制数据的流量和传输速度。发送方和接收方都有一个滑动窗口，用于控制数据的传输。发送方根据接收方的窗口大小来控制发送数据的数量，接收方根据自己的处理能力来控制接收数据的数量。通过滑动窗口机制，TCP协议可以避免数据的丢失和拥塞。</li><li>超时重传：TCP协议在数据传输过程中使用超时重传机制来保证数据的可靠传输。如果发送方没有收到确认包，就会重传数据包，直到接收方发送确认包为止。为了避免重传的时间过长，TCP协议会设置一个超时时间，如果在超时时间内没有收到确认包，就会重传数据包。</li><li>拥塞控制：TCP使用拥塞控制算法来控制网络拥塞。拥塞控制算法的主要目的是防止网络拥塞，以确保网络传输的可靠性和公平性。TCP的拥塞控制算法主要包括四个部分：总的来说，拥塞控制就是判断丢包率来动态控制滑动窗口 <ol><li>慢启动：在连接建立时，TCP会将发送窗口大小设置为一个较小的值，然后逐渐增加发送窗口大小，直到达到一个合适的值。</li><li>拥塞避免：当发送窗口大小达到一个合适的值后，TCP会进入拥塞避免状态，此时发送窗口大小会按照一定的算法进行调整，以避免网络拥塞。</li><li>快速重传：当TCP接收到重复的确认消息时，会立即重传丢失的数据包，以加快数据传输速度。</li><li>快速恢复：当TCP接收到重复的确认消息时，会将发送窗口大小减半，然后进入快速恢复状态，此时发送窗口大小会按照一定的算法进行调整，以避免网络拥塞。</li></ol></li></ol><h2 id="关联链接" tabindex="-1">关联链接 <a class="header-anchor" href="#关联链接" aria-label="Permalink to &quot;关联链接&quot;">​</a></h2><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/133307545" target="_blank" rel="noreferrer">30张图解：TCP重传、滑动窗口、流量控制、拥塞控制</a></li></ul>',12)]))}const u=a(o,[["render",r]]);export{C as __pageData,u as default};
